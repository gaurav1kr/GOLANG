In Go, GOPATH and GOROOT are two important environment variables that serve different purposes in managing Go's environment, code organization, and execution.

GOPATH vs GOROOT :- 
1. GOROOT:
Definition: GOROOT specifies the directory where your Go installation is located. This directory contains the Go standard library, compiler, and other Go tools.
Purpose: It tells the Go toolchain where to find the Go installation, including the Go binaries and standard packages.
Set by Default: In most cases, GOROOT is automatically set by the Go installation process, so you don’t typically need to modify or set this variable manually.

2. GOPATH:
Definition: GOPATH defines the root directory for your Go workspace. This is where your Go project files (source code, binaries, and dependencies) are stored.
Purpose: It tells Go where to look for and place your own Go projects, downloaded dependencies, and compiled binaries.
Customizable: You can set GOPATH to any directory on your system, depending on where you want to store your Go projects and dependencies.
Default Locations:
GOROOT: By default, when you install Go, GOROOT will be set to the directory where Go is installed (e.g., /usr/local/go on Linux/macOS or C:\Go on Windows).
GOPATH: Prior to Go 1.11, GOPATH was mandatory, and it defaulted to $HOME/go (Linux/macOS) or %USERPROFILE%\go (Windows). However, with the introduction of Go Modules (Go 1.11+), GOPATH is used less often, but still important for certain workflows.
Structure of GOROOT:
The GOROOT directory typically contains:

/bin: The Go compiler and other tools.
/pkg: Precompiled standard libraries.
/src: The source code of the Go standard library.
Structure of GOPATH:
The GOPATH directory typically contains three subdirectories:

/src: This is where your Go source code lives (organized by package).
/pkg: Compiled package objects (this is where Go puts your dependency binaries).
/bin: This is where Go puts the compiled binaries from your Go programs.
Example to Illustrate the Difference:
1. GOROOT Example:
Let's say you install Go at /usr/local/go, and you check the value of GOROOT:

bash
Copy code
$ go env GOROOT
/usr/local/go
If you inspect /usr/local/go/src, you'll see the Go standard library source code (e.g., fmt, net, etc.). These are built-in libraries that come with the Go installation.
You don’t place your own code inside GOROOT; it's solely for Go's own tooling and libraries.
2. GOPATH Example:
Let’s assume you set GOPATH to /home/gaurav/go_projects, where you store your own Go projects. You can set the GOPATH environment variable like this:

bash
Copy code
export GOPATH=/home/gaurav/go_projects
Then, your directory structure inside GOPATH would look like this:

plaintext
Copy code
/home/gaurav/go_projects/
    bin/      # Compiled binaries (e.g., from 'go install')
    pkg/      # Compiled packages (e.g., installed dependencies)
    src/      # Your project source files
If you create a new Go project, say myapp, your project structure might look like this:

plaintext
Copy code
/home/gaurav/go_projects/
    src/
        github.com/gaurav/myapp/
            main.go
Now, when you build or run your project:

bash
Copy code
$ cd $GOPATH/src/github.com/gaurav/myapp
$ go build
$ ./myapp  # This would run your program
Example Summary:
GOROOT:
Location: /usr/local/go/ (or wherever Go is installed).
Contains: Go standard library, compiler, and tools.
Managed by: Go installation.
GOPATH:
Location: /home/gaurav/go_projects (or custom location).
Contains: Your Go projects, source code, and dependencies.
Managed by: You (user-defined).
